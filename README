# ynWidgetAjaxAutocomplete plugin (for symfony 1.3-1.4) #

The `ynWidgetAjaxAutocompletePlugin` is a symfony plugin that provides an AJAX
autocomplete replacement for `sfWidgetForm*Choice`. It uses the jQueryUI
Autocomplete widget.

## Installation ##

  * Install the plugin (via a package)

        symfony plugin:install ynWidgetAjaxAutocompletePlugin

  * Install the plugin (via a Subversion checkout)

        svn co http//svn.symfony-project.com/plugins/ynWidgetAjaxAutocompletePlugin/trunk plugins/ynWidgetAjaxAutocompletePlugin

  * Activate the plugin in the `config/ProjectConfiguration.class.php`

        class ProjectConfiguration extends sfProjectConfiguration
        {
          public function setup()
          {
            $this-&gt;enablePlugins(array(
              &#039;sfDoctrinePlugin&#039;,
              &#039;ynWidgetAjaxAutocompletePlugin&#039;,
              &#039;...&#039;
            ));
          }
        }

  * Enable jQuery in your application via `view.yml` (you may also
want/need to maintain a local copy):

        javascripts:
          - https://ajax.googleapis.com/ajax/libs/jquery/1.5.0/jquery.min.js

  * Clear your cache

        symfony cc

## Utilization ##

To add the plugin to your form:

  * Create an AJAX action to populate the autocomplete. The widget will
supply these parameters:
    * `term` - the value to match
    * `not` - keys to exclude, separated by commas
    * `limit` - the greatest number of results to return

            public function executeAjax( sfWebRequest $request )
            {
              $this->getResponse()->setContentType('application/json');

              if ( $request->getParameter('limit') ) {
                $limit = $request->getParameter('limit');
              }
              else {
                $limit = 10;
              }

              $not = explode( ',', $request->getParameter('not') );

              $objects = Doctrine::getTable('Person')
                ->retrieveForAjax( $request->getParameter('term'), $limit, $not );

              $ajax_array = array();

              foreach ( $objects as $object ) {
                $ajax_array[] = array(
                  'id' => $object->getId(), 'value' => (string) $object
                );
              }

              return $this->renderText( json_encode($ajax_array) );
            }

            /*
             * and in PersonTable:
             */


            /**
             * Returns a JSON-encoded array of towns based on an AJAX-requested query
             *
             * @param string $q
             * @param int $limit
             * @param array int[] $not Exclude these IDs
             */
            public static function retrieveForAjax( $q, $limit = 10, array $not = array() )
            {
              $q = self::getInstance()
                ->createQuery('p')
                ->where('p.name LIKE ?', '%'.$q.'%')
                ->limit( $limit )
                ->orderBy('p.last_name, p.first_name ASC')
                ;

              if ( $not ) {
                $q->whereNotIn('p.id', $not);
              }

              return $q->execute();
            }


  * Now, add the widget to your form, with some options.
    * You will replace the default widget, but you must pass the default to
the new widget as the `noscript_widget` argument.
    * Supply the default value(s) as an associative array of `id => name`,
as `default`. For example:

            array(
              8  => 'John Doe',
              27 => 'Jim Doe',
            )

    * Supply the route of the AJAX action as `source`. Include the `not`
parameter if you wish to exclude one or more records (comma-separated IDs).
    * Supply a pattern to link to the referenced record as `item_url`. The
`9999999999` is a placeholder that appeared to be necessary in order to pass
the value through `url_for()` It is substituted out in `autocomplete.js`.
    * Specify whether one-to-many or many-to-many with `multiple`.
    * Supply a URL to link on the side of the widget, e.g. to create a new
record of the referenced class, as `aux_url` (optional)

            $this_id = $this->getObject()->getId();

            $this->widgetSchema['sons_list'] = new ynWidgetAjaxAutocomplete(
              array(
                'noscript_widget' => $this->widgetSchema['sons_list'],
                'default'         => $this->getObject()->getSonStringArray(),
                'source'          => '/backend.php/person/ajax?not='.$this_id,
                'multiple'        => true,
                'aux_url'         => url_for( 'person/new' ),
                'item_url'        => url_for( 'person/edit?id=9999999999' ),
              )
            );
